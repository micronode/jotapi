openapi: 3.0.0
info:
  title: JotCal
  version: '1.0'
  description: A scheduling data API based on the iCalendar specification
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/micronode/jotapi/main/LICENSE'
  contact:
    name: Micronode
    url: 'https://micronode.com/jot'
    email: fortuna@micronode.com
servers:
  - url: '{protocol}://{host}/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      host:
        default: api.example.com
    description: JotCal v1
paths:
  /calendars:
    get:
      summary: Your GET endpoint
      tags:
        - calendar
        - list
      responses:
        '200':
          $ref: '#/components/responses/calendar-list'
      operationId: list-calendars
      description: Retrieve a list of visible calendars
      parameters:
        - $ref: '#/components/parameters/filter'
    parameters: []
    post:
      summary: ''
      operationId: create-calendar
      responses:
        '201':
          $ref: '#/components/responses/calendar'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/calendar-spec'
            examples:
              example-1:
                value:
                  name: string
                  description: string
      description: Create a new calendar
      tags:
        - calendar
  /events:
    get:
      summary: Your GET endpoint
      tags:
        - event
        - list
      responses:
        '200':
          $ref: '#/components/responses/event-list'
      operationId: list-events
      description: Return a list of visible events
      parameters:
        - $ref: '#/components/parameters/calendar'
        - $ref: '#/components/parameters/filter'
    post:
      summary: ''
      operationId: create-event
      responses:
        '201':
          $ref: '#/components/responses/event'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-spec'
            examples:
              example-1:
                value:
                  organizer:
                    cal-address: 'mailto:jane_doe@example.com'
                    cn: string
                    dir: 'http://example.com'
                    sent-by: 'mailto:joecool@example.com'
                    language: en-US
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  calendar: 0354b24a-d367-43a5-8aab-5912587bfaa6
      description: Create a new event
      tags:
        - event
  /todos:
    get:
      summary: Your GET endpoint
      tags:
        - todo
        - list
      responses:
        '200':
          $ref: '#/components/responses/todo-list'
      operationId: list-todos
      parameters:
        - $ref: '#/components/parameters/calendar'
        - $ref: '#/components/parameters/filter'
      description: Reteive a list of todos
    post:
      summary: ''
      operationId: create-todo
      responses:
        '201':
          $ref: '#/components/responses/todo'
      description: Create a new todo component
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todo-spec'
            examples:
              example-1:
                value:
                  organizer:
                    cal-address: 'mailto:jane_doe@example.com'
                    cn: string
                    dir: 'http://example.com'
                    sent-by: 'mailto:joecool@example.com'
                    language: en-US
                  calendar: 0354b24a-d367-43a5-8aab-5912587bfaa6
                  summary: string
      tags:
        - todo
  /journals:
    get:
      summary: Your GET endpoint
      tags:
        - journal
        - list
      responses:
        '200':
          $ref: '#/components/responses/journal-list'
      operationId: list-journals
      parameters:
        - $ref: '#/components/parameters/calendar'
        - $ref: '#/components/parameters/filter'
      description: Retrieve a list of journal entries
    post:
      summary: ''
      operationId: create-journal
      responses:
        '201':
          $ref: '#/components/responses/journal'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/journal-spec'
            examples:
              example-1:
                value:
                  organizer:
                    cal-address: 'mailto:jane_doe@example.com'
                    cn: string
                    dir: 'http://example.com'
                    sent-by: 'mailto:joecool@example.com'
                    language: en-US
                  calendar: 0354b24a-d367-43a5-8aab-5912587bfaa6
                  summary: string
      description: Create a journal entry
      tags:
        - journal
  /freebusy:
    get:
      summary: Your GET endpoint
      tags:
        - freebusy
      responses:
        '200':
          $ref: '#/components/responses/freebusy'
      operationId: request-freebusy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        description: Freebusy request
      description: Retrieve a freebusy specification
  '/calendar/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - calendar
      responses:
        '200':
          $ref: '#/components/responses/calendar'
      operationId: get-calendar
      description: Retrieve detail of a specific calendar
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-calendar
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/calendar.v1.yaml
            examples: {}
      description: Overwrite a calendar instance
      tags:
        - calendar
    patch:
      summary: ''
      operationId: update-calendar
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/calendar.v1.yaml
            examples: {}
      description: Update a calendar instance
      tags:
        - calendar
    delete:
      summary: ''
      operationId: delete-calendar
      responses:
        '200':
          description: OK
      description: Delete a calendar instance
      tags:
        - calendar
  '/alarms/{Type}/{Uid}':
    get:
      summary: List component alarms
      tags:
        - alarm
        - list
      responses:
        '200':
          $ref: '#/components/responses/alarm-list'
      operationId: list-alarms
      description: Return a list of visible alarms for a component
      parameters: []
    post:
      summary: Create alarm
      operationId: create-alarm
      responses:
        '201':
          $ref: '#/components/responses/alarm'
      description: |-
        Create a new component alarm.

        NOTE: When an alarm is created the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - alarm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alarm-spec'
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
      - name: Type
        in: path
        required: true
        schema:
          type: string
        description: 'A component type; used to manage alarms, attachments, etc. associated with a component'
  '/alarm/{Uid}':
    get:
      summary: Get a component alarm
      tags:
        - alarm
      responses:
        '200':
          $ref: '#/components/responses/alarm'
      operationId: get-alarm
      description: Get an existing component alarm
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
    put:
      summary: Set a component alarm
      operationId: set-alarm
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/alarm.v1.yaml
            examples: {}
          application/xml:
            schema:
              $ref: ../models/alarm.v1.yaml
      description: |-
        Replace an existing component alarm.

        NOTE: When an alarm is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - alarm
    patch:
      summary: Update a component alarm
      operationId: update-alarm
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/alarm.v1.yaml
      description: |-
        Update an existing component alarm.

        NOTE: When an alarm is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - alarm
    delete:
      summary: Delete a component alarm
      operationId: delete-alarm
      responses:
        '200':
          description: OK
      description: |-
        Delete an existing component alarm.

        NOTE: When an alarm is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - alarm
  '/event/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - event
      responses:
        '200':
          $ref: '#/components/responses/event-list'
      operationId: get-event
      description: 'Return a list of event components representing the latest version, recurrence overrides, and optionally past revisions.'
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-event
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/event.v1.yaml
            examples: {}
        description: ''
      description: Create a new revision by replacing the entire component content with the supplied values.
      tags:
        - event
    patch:
      summary: ''
      operationId: update-event
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-patch'
            examples: {}
        description: ''
      description: Create a new event revision using values provided in the payload
      tags:
        - event
    delete:
      summary: ''
      operationId: delete-event
      responses:
        '200':
          description: OK
      description: Delete an existing event
      tags:
        - event
  '/journal/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - journal
      responses:
        '200':
          $ref: '#/components/responses/journal-list'
      operationId: get-journal
      description: 'Return a list of journal components representing the latest revision, recurrence overrides, and optionally past revisions.'
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-journal
      responses:
        '200':
          description: OK
      description: Create a new revision by replacing the entire component content with the supplied values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/journal.v1.yaml
            examples: {}
        description: ''
      tags:
        - journal
    patch:
      summary: ''
      operationId: update-journal
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/journal.v1.yaml
            examples: {}
      description: Update a journal entry
      tags:
        - journal
    delete:
      summary: ''
      operationId: delete-journal
      responses:
        '200':
          description: OK
      description: Delete a journal entry
      tags:
        - journal
  '/todo/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - todo
      responses:
        '200':
          $ref: '#/components/responses/todo-list'
      operationId: get-todo
      description: 'Return a list of todo components representing the latest version, recurrence overrides, and optionally past revisions.'
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    parameters:
      - $ref: '#/components/parameters/Uid'
    delete:
      summary: ''
      operationId: delete-todo
      responses:
        '200':
          description: OK
      description: Remove an existing todo component
      tags:
        - todo
    patch:
      summary: ''
      operationId: update-todo
      responses:
        '200':
          $ref: '#/components/responses/todo'
      description: Update an existing todo component
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/todo.v1.yaml
            examples: {}
      tags:
        - todo
    put:
      summary: ''
      operationId: set-todo
      responses:
        '200':
          description: OK
      description: Create a new revision by replacing the entire component content with the supplied values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/todo.v1.yaml
      tags:
        - todo
  '/availability/{Uid}':
    get:
      summary: Get resource availability
      tags:
        - availability
      responses:
        '200':
          $ref: '#/components/responses/availability-list'
      operationId: get-availability
      description: Return availability definitions for specified uid
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    put:
      summary: ''
      operationId: set-availability
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/availability.v1.yaml
            examples: {}
        description: ''
      description: Replace an existing availability definition
      tags:
        - availability
    patch:
      summary: ''
      operationId: update-availability
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/availability.v1.yaml
            examples: {}
      description: Update an existing availability definition
      tags:
        - availability
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
  '/attachments/{Type}/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - attachment
        - list
      responses:
        '200':
          $ref: '#/components/responses/attachment-list'
      operationId: list-attachments
      description: Retrieve a list of attachments for a component
    post:
      summary: ''
      operationId: upload-attachment
      responses:
        '201':
          $ref: '#/components/responses/attachment'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attach-spec'
            examples: {}
          application/octet-stream:
            schema:
              type: object
              properties: {}
        description: Upload binary content of attachment
      description: |-
        Upload a new attachment to the component specified by UID path parameter.

        NOTE: When an attachment is uploaded the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - attachment
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
      - name: Type
        in: path
        required: true
        schema:
          type: string
          enum:
            - event
            - todo
            - journal
            - availability
            - alarm
            - available
        description: 'A component type; used to manage alarms, attachments, etc. associated with a component'
  '/attachment/{Type}/{Uid}/{Digest}':
    get:
      summary: Your GET endpoint
      tags:
        - attachment
      operationId: get-attachment
      description: Return content of an encoded binary attachment
      responses:
        '200':
          $ref: '#/components/responses/attachment'
      parameters:
        - schema:
            type: string
          in: header
          name: Accept
          description: Indicates the attachment content is requested if matches the advertised content type
    parameters:
      - schema:
          type: string
        name: Digest
        in: path
        required: true
        description: Message digest of the requested attachment or reference
      - name: Type
        in: path
        required: true
        schema:
          type: string
          enum:
            - event
            - todo
            - journal
            - availability
            - alarm
            - available
        description: 'A component type; used to manage alarms, attachments, etc. associated with a component'
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
    put:
      summary: ''
      operationId: set-attachment
      responses:
        '200':
          description: OK
      description: |-
        Replace an encoded binary attachment.

        NOTE: When an attachment is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
              properties: {}
        description: ''
      tags:
        - attachment
    delete:
      summary: ''
      operationId: delete-attachment
      responses:
        '200':
          description: OK
      description: |-
        Delete an encoded attachment.

        NOTE: When an attachment is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - attachment
  /availability:
    get:
      summary: Your GET endpoint
      tags:
        - availability
        - list
      responses:
        '200':
          $ref: '#/components/responses/availability-list'
      operationId: list-availability
      description: Return a list of availability definitions matching request criteria
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/calendar'
    post:
      summary: ''
      operationId: create-availability
      responses:
        '201':
          $ref: '#/components/responses/availability'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/availability.v1.yaml
            examples: {}
      description: Create a new availability component
      tags:
        - availability
  '/available/availability/{Uid}':
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
    get:
      summary: Your GET endpoint
      tags:
        - available
        - list
      responses:
        '200':
          $ref: '#/components/responses/available-list'
      operationId: list-available
      description: Return a list of available definitions for the specified availability id.
    post:
      summary: ''
      operationId: create-available
      responses:
        '201':
          description: Created
      description: |-
        Create a new available definition for the specified availability id.

        NOTE: When an available definition is created the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - available
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/available-spec'
  '/available/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - available
      responses:
        '200':
          $ref: '#/components/responses/available-list'
      operationId: get-available
      description: Return a list of available components (including recurrence ovverides) representing an available definition
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
    put:
      summary: ''
      operationId: set-available
      responses:
        '200':
          description: OK
      description: |-
        Replace an existing available definition with a new value.

        NOTE: When an available definition is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - available
    patch:
      summary: ''
      operationId: update-available
      responses:
        '200':
          description: OK
      description: |-
        Update an existing available definition.

        NOTE: When an available definition is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - available
    delete:
      summary: ''
      operationId: delete-available
      responses:
        '200':
          description: OK
      description: |-
        Delete an existing available definition.

        NOTE: When an available definition is modified the parent component SHOULD also be updated (at least by incremenenting the SEQUENCE property).
      tags:
        - available
components:
  schemas:
    event-patch:
      title: event-patch
      type: object
      properties:
        id:
          type: string
      description: Partial event data used to update an existing event
    alarm-spec:
      title: alarm-spec
      type: object
      x-examples:
        example-1:
          action: AUDIO
          trigger:
            dtstart: '2019-08-24T14:15:22Z'
      description: Specification for a new alarm
      properties:
        action:
          type: string
          enum:
            - AUDIO
            - DISPLAY
            - EMAIL
        trigger:
          $ref: ../models/trigger.v1.yaml
    calendar-spec:
      title: calendar-spec
      type: object
      description: Specification for a new calendar
      x-examples:
        example-1:
          name: string
          description: string
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    event-spec:
      title: event-spec
      type: object
      properties:
        summary:
          type: string
        calendar:
          type: string
          format: uuid
      required:
        - summary
        - calendar
      x-examples:
        example-1:
          summary: string
          calendar: 0354b24a-d367-43a5-8aab-5912587bfaa6
    todo-spec:
      title: todo-spec
      type: object
      properties:
        summary:
          type: string
        calendar:
          type: string
          format: uuid
      required:
        - summary
        - calendar
      x-examples:
        example-1:
          summary: string
          calendar: 0354b24a-d367-43a5-8aab-5912587bfaa6
    journal-spec:
      title: journal-spec
      type: object
      properties:
        summary:
          type: string
        calendar:
          type: string
          format: uuid
      required:
        - summary
        - calendar
      x-examples:
        example-1:
          summary: string
          calendar: 0354b24a-d367-43a5-8aab-5912587bfaa6
    availability-spec:
      title: availability-spec
      type: object
      properties:
        summary:
          type: string
        calendar:
          type: string
          format: uuid
      required:
        - summary
        - calendar
      x-examples:
        example-1:
          summary: string
          calendar: 0354b24a-d367-43a5-8aab-5912587bfaa6
    attach-spec:
      title: attach-spec
      type: object
      properties:
        url:
          type: string
          format: uri
        fmttype:
          type: string
      required:
        - url
      x-examples:
        example-1:
          url: 'http://example.com'
          fmttype: string
    available-spec:
      title: available-spec
      type: object
      properties:
        id:
          type: string
  responses:
    event-list:
      description: A list of calendar events
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/event.v1.yaml
          examples:
            example-1:
              value:
                - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  organizer:
                    cal-address: 'mailto:jane_doe@example.com'
                    cn: string
                    dir: 'http://example.com'
                    sent-by: 'mailto:joecool@example.com'
                    language: en-US
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  sequence: 0
                  recurrence-id: '2019-08-24T14:15:22Z'
                  class: PUBLIC
                  priority: 0
                  status: TENTATIVE
                  dtend: '2019-08-24T14:15:22Z'
                  duration: PT15M
                  rrule: FREQ=WEEKLY
                  description: string
                  url: 'http://example.com'
                  geo: 49.8932;40.3834
                  location:
                    uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                    name: The venue
                  last-modified: '2019-08-24T14:15:22Z'
                  created: '2019-08-24T14:15:22Z'
                  categories:
                    - string
                  comment:
                    - text: string
                      altrep: string
                  resources:
                    - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                      altrep: 'CID:part3.msg.970415T083000@example.com'
                  attach:
                    - fmttype: string
                      binary: string
                  related-to:
                    - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                      reltype: PARENT
                  rdate:
                    - '2019-08-24T14:15:22Z'
                  exdate:
                    - '2019-08-24T14:15:22Z'
                  attendee:
                    - cal-address: 'mailto:joecool@example.com'
                      cu-type: INDIVIDUAL
                      member: 'mailto:DEV-GROUP@example.com'
                      role: REQ-PARTICIPANT
                      partstat: NEEDS-ACTION
                      rsvp: false
                      delto: 'mailto:joecool@example.com'
                      delfrom: 'mailto:joecool@example.com'
                      sentby: 'mailto:joecool@example.com'
                      cn: string
                      dir: 'http://example.com'
                      language: en-US
                  transp: OPAQUE
                  contact:
                    - text: string
                      altrep: string
                  styled-description:
                    - fmttype: text/html
                      text: <h1>Test Event</h1><p>An example event description<p>
                      derived: true
                  structured-data:
                    - fmttype: string
                      schema: string
                      encoding: BASE64
                      text: string
    todo-list:
      description: A list of calendar todos
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/todo.v1.yaml
    journal-list:
      description: A list of calendar journals
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/journal.v1.yaml
    event:
      description: A calendar event
      content:
        application/json:
          schema:
            $ref: ../models/event.v1.yaml
          examples:
            example-1:
              value:
                uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                organizer:
                  cal-address: 'mailto:jane_doe@example.com'
                  cn: string
                  dir: 'http://example.com'
                  sent-by: 'mailto:joecool@example.com'
                  language: en-US
                summary: string
                dtstart: '2019-08-24T14:15:22Z'
                sequence: 0
                recurrence-id: '2019-08-24T14:15:22Z'
                class: PUBLIC
                priority: 0
                status: TENTATIVE
                dtend: '2019-08-24T14:15:22Z'
                duration: PT15M
                rrule: FREQ=WEEKLY
                description: string
                url: 'http://example.com'
                geo: 49.8932;40.3834
                location:
                  uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  name: The venue
                last-modified: '2019-08-24T14:15:22Z'
                created: '2019-08-24T14:15:22Z'
                categories:
                  - string
                comment:
                  - text: string
                    altrep: string
                resources:
                  - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                    altrep: 'CID:part3.msg.970415T083000@example.com'
                attach:
                  - fmttype: string
                    binary: string
                related-to:
                  - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                    reltype: PARENT
                rdate:
                  - '2019-08-24T14:15:22Z'
                exdate:
                  - '2019-08-24T14:15:22Z'
                attendee:
                  - cal-address: 'mailto:joecool@example.com'
                    cu-type: INDIVIDUAL
                    member: 'mailto:DEV-GROUP@example.com'
                    role: REQ-PARTICIPANT
                    partstat: NEEDS-ACTION
                    rsvp: false
                    delto: 'mailto:joecool@example.com'
                    delfrom: 'mailto:joecool@example.com'
                    sentby: 'mailto:joecool@example.com'
                    cn: string
                    dir: 'http://example.com'
                    language: en-US
                transp: OPAQUE
                contact:
                  - text: string
                    altrep: string
                styled-description:
                  - fmttype: text/html
                    text: <h1>Test Event</h1><p>An example event description<p>
                    derived: true
                structured-data:
                  - fmttype: string
                    schema: string
                    encoding: BASE64
                    text: string
    journal:
      description: A calendar journal component
      content:
        application/json:
          schema:
            $ref: ../models/journal.v1.yaml
    todo:
      description: A calendar todo component
      content:
        application/json:
          schema:
            $ref: ../models/todo.v1.yaml
    calendar:
      description: A grouping of calendar components
      content:
        application/json:
          schema:
            $ref: ../models/calendar.v1.yaml
          examples:
            example-1:
              value:
                uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                calscale: GREGORIAN
                name: 'My Social Calendar '
                description: 'A collection of social events, journals, tasks and availability'
                last-modified: '2019-08-24T14:15:22Z'
                url: 'https://calendar.example.com/mysocialcalendar.html'
                categories:
                  - social
                refresh-interval: P1W
                source: 'https://calendar.example.com/mysocialcalendar.ics'
                color: red
                image: 'https://calendar.example.com/mysocialcalendar.png'
                conference: 'https://meeting.example.com/mysocialcalendar'
    calendar-list:
      description: A list of calendar definitions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/calendar.v1.yaml
          examples:
            example-1:
              value:
                - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  calscale: GREGORIAN
                  name: 'My Social Calendar '
                  description: 'A collection of social events, journals, tasks and availability'
                  last-modified: '2019-08-24T14:15:22Z'
                  url: 'https://calendar.example.com/mysocialcalendar.html'
                  categories:
                    - social
                  refresh-interval: P1W
                  source: 'https://calendar.example.com/mysocialcalendar.ics'
                  color: red
                  image: 'https://calendar.example.com/mysocialcalendar.png'
                  conference: 'https://meeting.example.com/mysocialcalendar'
    alarm-list:
      description: A list of component alarms
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/alarm.v1.yaml
          examples:
            example-1:
              value:
                - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  action: AUDIO
                  trigger:
                    dtstart: '2019-08-24T14:15:22Z'
                  description: string
                  duration: PT15M
                  repeat: 1
                  summary: string
                  attendees:
                    - cal-address: 'mailto:joecool@example.com'
                      cu-type: INDIVIDUAL
                      member: 'mailto:DEV-GROUP@example.com'
                      role: REQ-PARTICIPANT
                      partstat: NEEDS-ACTION
                      rsvp: false
                      delto: 'mailto:joecool@example.com'
                      delfrom: 'mailto:joecool@example.com'
                      sentby: 'mailto:joecool@example.com'
                      cn: string
                      dir: 'http://example.com'
                      language: en-US
                  attachments:
                    - fmttype: string
                      binary: string
                  styled-description:
                    - fmttype: text/html
                      text: <h1>Test Event</h1><p>An example event description<p>
                      derived: true
    alarm:
      description: A component alarm
      content:
        application/json:
          schema:
            $ref: ../models/alarm.v1.yaml
          examples:
            example-1:
              value:
                uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                action: AUDIO
                trigger:
                  dtstart: '2019-08-24T14:15:22Z'
                description: string
                duration: PT15M
                repeat: 1
                summary: string
                attendees:
                  - cal-address: 'mailto:joecool@example.com'
                    cu-type: INDIVIDUAL
                    member: 'mailto:DEV-GROUP@example.com'
                    role: REQ-PARTICIPANT
                    partstat: NEEDS-ACTION
                    rsvp: false
                    delto: 'mailto:joecool@example.com'
                    delfrom: 'mailto:joecool@example.com'
                    sentby: 'mailto:joecool@example.com'
                    cn: string
                    dir: 'http://example.com'
                    language: en-US
                attachments:
                  - fmttype: string
                    binary: string
                styled-description:
                  - fmttype: text/html
                    text: <h1>Test Event</h1><p>An example event description<p>
                    derived: true
    availability-list:
      description: A list of user availability definitions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/availability.v1.yaml
          examples:
            example-1:
              value:
                - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  organizer:
                    cal-address: 'mailto:jane_doe@example.com'
                    cn: string
                    dir: 'http://example.com'
                    sent-by: 'mailto:joecool@example.com'
                    language: en-US
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  dtend: '2019-08-24T14:15:22Z'
                  rrule: FREQ=WEEKLY
                  sequence: 0
                  class: PUBLIC
                  priority: 0
                  description: string
                  url: string
                  location:
                    uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                    name: The venue
                  last-modified: '2019-08-24T14:15:22Z'
                  created: '2019-08-24T14:15:22Z'
                  duration: PT15M
                  busytype: BUSY
    attachment-list:
      description: A list of component attachments
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/attachment.v1.yaml
          examples:
            example-1:
              value:
                - fmttype: string
                  binary: string
    attachment:
      description: A component attachment
      content:
        application/json:
          schema:
            $ref: ../models/attachment.v1.yaml
          examples:
            example-1:
              value:
                fmttype: string
                binary: string
        application/octet-stream:
          schema:
            type: object
            properties: {}
          examples: {}
    freebusy:
      description: A free/busy schedule definition
      content:
        application/json:
          schema:
            $ref: ../models/freebusy.v1.yaml
          examples:
            example-1:
              value:
                uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                organizer:
                  cal-address: 'mailto:jane_doe@example.com'
                  cn: string
                  dir: 'http://example.com'
                  sent-by: 'mailto:joecool@example.com'
                  language: en-US
                dtstart: '2019-08-24T14:15:22Z'
                dtend: '2019-08-24T14:15:22Z'
                url: 'http://www.example.com/calendar/busytime/jsmith.ifb'
                fbperiods:
                  - start: '2019-08-24T14:15:22Z'
                    end: '2019-08-24T14:15:22Z'
                    fbtype: BUSY
                    duration: PT5H30M
                attendee:
                  cal-address: 'mailto:joecool@example.com'
                  cu-type: INDIVIDUAL
                  member: 'mailto:DEV-GROUP@example.com'
                  role: REQ-PARTICIPANT
                  partstat: NEEDS-ACTION
                  rsvp: false
                  delto: 'mailto:joecool@example.com'
                  delfrom: 'mailto:joecool@example.com'
                  sentby: 'mailto:joecool@example.com'
                  cn: string
                  dir: 'http://example.com'
                  language: en-US
                comment:
                  - text: string
                    altrep: string
                contact:
                  text: string
                  altrep: string
                styled-description:
                  - fmttype: text/html
                    text: <h1>Test Event</h1><p>An example event description<p>
                    derived: true
    availability:
      description: Example response
      content:
        application/json:
          schema:
            $ref: ../models/availability.v1.yaml
          examples:
            example-1:
              value:
                uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                organizer:
                  cal-address: 'mailto:jane_doe@example.com'
                  cn: string
                  dir: 'http://example.com'
                  sent-by: 'mailto:joecool@example.com'
                  language: en-US
                summary: string
                dtstart: '2019-08-24T14:15:22Z'
                dtend: '2019-08-24T14:15:22Z'
                sequence: 0
                class: PUBLIC
                priority: 0
                description: string
                url: string
                location:
                  uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  name: The venue
                last-modified: '2019-08-24T14:15:22Z'
                created: '2019-08-24T14:15:22Z'
                duration: PT15M
                busytype: BUSY
    available:
      description: Example response
      content:
        application/json:
          schema:
            $ref: ../models/available.v1.yaml
          examples:
            example-1:
              value:
                uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                dtstart: '2019-08-24T14:15:22Z'
                dtend: '2019-08-24T14:15:22Z'
                duration: PT15M
                summary: string
                recurrence-id: '2019-08-24T14:15:22Z'
                location:
                  uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  name: The venue
                description: string
                created: '2019-08-24T14:15:22Z'
                last-modified: '2019-08-24T14:15:22Z'
                rrule: FREQ=WEEKLY
                categories:
                  - string
                comments:
                  - string
                exdates:
                  - '2019-08-24T14:15:22Z'
                rdates:
                  - '2019-08-24T14:15:22Z'
                contacts:
                  - string
    available-list:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/available.v1.yaml
          examples:
            example-1:
              value:
                - uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                  dtstart: '2019-08-24T14:15:22Z'
                  dtend: '2019-08-24T14:15:22Z'
                  duration: PT15M
                  summary: string
                  recurrence-id: '2019-08-24T14:15:22Z'
                  location:
                    uid: 07cc67f4-45d6-494b-adac-09b5cbc7e2b5
                    name: The venue
                  description: string
                  created: '2019-08-24T14:15:22Z'
                  last-modified: '2019-08-24T14:15:22Z'
                  rrule: FREQ=WEEKLY
                  categories:
                    - string
                  comments:
                    - string
                  exdates:
                    - '2019-08-24T14:15:22Z'
                  rdates:
                    - '2019-08-24T14:15:22Z'
                  contacts:
                    - string
  parameters:
    Uid:
      name: Uid
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier for a component or calendar
    includeRevisions:
      name: includeRevisions
      in: query
      required: false
      schema:
        type: boolean
      description: Include previous revisions of requested component
    calendar:
      name: uid
      in: query
      required: false
      schema:
        type: string
      description: Unique id of a calendar to filter components
    Type:
      name: Type
      in: path
      required: true
      schema:
        type: string
        enum:
          - event
          - todo
          - journal
          - availability
          - alarm
          - available
      description: 'A component type; used to manage alarms, attachments, etc. associated with a component'
    filter:
      name: f
      in: query
      required: false
      schema:
        type: string
        example: 'uid in [''1234-9876-1224'']'
      description: An ical4j filter expression
  securitySchemes: {}
  requestBodies: {}
tags:
  - name: alarm
  - name: attachment
  - name: availability
  - name: available
  - name: calendar
  - name: event
  - name: freebusy
  - name: journal
  - name: list
  - name: todo

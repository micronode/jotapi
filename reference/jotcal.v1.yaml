openapi: 3.0.0
info:
  title: JotCal
  version: '1.0'
  description: A scheduling data API based on the iCalendar specification
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/micronode/jotapi/main/LICENSE'
  contact:
    name: Micronode
    url: 'https://micronode.com/jot'
    email: fortuna@micronode.com
servers:
  - url: '{protocol}://{host}/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      host:
        default: api.example.com
paths:
  /calendars:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/calendar-list'
      operationId: list-calendars
      description: Retrieve a list of visible calendars
      parameters:
        - $ref: '#/components/parameters/organizer'
    parameters: []
    post:
      summary: ''
      operationId: create-calendar
      responses:
        '200':
          $ref: '#/components/responses/calendar'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                calscale:
                  type: string
                  enum:
                    - GREGORIAN
            examples:
              example-1:
                value:
                  name: string
                  description: string
                  calscale: GREGORIAN
  /events:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/event-list'
      operationId: list-events
      description: Return a list of visible events
      parameters:
        - $ref: '#/components/parameters/calendar'
        - $ref: '#/components/parameters/organizer'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/class'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
    post:
      summary: ''
      operationId: create-event
      responses:
        '200':
          $ref: '#/components/responses/event'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organizer:
                  type: string
                summary:
                  type: string
                dtstart:
                  type: string
                  format: date-time
                calendar:
                  type: string
              required:
                - organizer
                - summary
                - dtstart
                - calendar
            examples:
              example-1:
                value:
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  calendar: string
  /todos:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/todo-list'
      operationId: list-todos
      parameters:
        - $ref: '#/components/parameters/calendar'
        - $ref: '#/components/parameters/class'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
        - $ref: '#/components/parameters/organizer'
    post:
      summary: ''
      operationId: create-todo
      responses:
        '200':
          $ref: '#/components/responses/todo'
      description: Create a new todo component
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organizer:
                  type: string
                calendar:
                  type: string
                summary:
                  type: string
              required:
                - organizer
                - calendar
                - summary
            examples:
              example-1:
                value:
                  organizer: string
                  calendar: string
                  summary: string
  /journals:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/journal-list'
      operationId: list-journals
      parameters:
        - $ref: '#/components/parameters/calendar'
        - $ref: '#/components/parameters/class'
        - $ref: '#/components/parameters/categories'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
        - $ref: '#/components/parameters/organizer'
    post:
      summary: ''
      operationId: create-journal
      responses:
        '200':
          $ref: '#/components/responses/journal'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organizer:
                  type: string
                calendar:
                  type: string
                summary:
                  type: string
              required:
                - organizer
                - calendar
                - summary
            examples:
              example-1:
                value:
                  organizer: string
                  calendar: string
                  summary: string
  /freebusy:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/freebusy'
      operationId: request-freebusy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        description: Freebusy request
  '/calendar/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/calendar'
      operationId: get-calendar
      description: Retrieve detail of a specific calendar
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-calendar
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/calendar.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  calscale: GREGORIAN
                  name: string
                  description: string
                  last-modified: '2019-08-24T14:15:22Z'
                  url: 'http://example.com'
                  categories:
                    - string
                  refresh-interval: string
                  source: 'http://example.com'
                  color: string
                  image: string
                  conference: 'http://example.com'
    patch:
      summary: ''
      operationId: update-calendar
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/calendar.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  calscale: GREGORIAN
                  name: string
                  description: string
                  last-modified: '2019-08-24T14:15:22Z'
                  url: 'http://example.com'
                  categories:
                    - string
                  refresh-interval: string
                  source: 'http://example.com'
                  color: string
                  image: string
                  conference: 'http://example.com'
    delete:
      summary: ''
      operationId: delete-calendar
      responses:
        '200':
          description: OK
  '/alarms/{Uid}':
    get:
      summary: List component alarms
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/alarm-list'
      operationId: list-alarms
      description: Return a list of visible alarms
      parameters: []
    post:
      summary: Create alarm
      operationId: create-alarm
      responses:
        '200':
          $ref: '#/components/responses/alarm'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - AUDIO
                    - DISPLAY
                    - EMAIL
                trigger:
                  oneOf:
                    - $ref: ../models/trigger.v1.yaml
                    - $ref: ../models/triggerRel.v1.yaml
            examples:
              example-1:
                value:
                  action: AUDIO
                  trigger:
                    dtstart: '2019-08-24T14:15:22Z'
      description: Create a new component alarm
    parameters:
      - $ref: '#/components/parameters/Uid'
  '/alarm/{Uid}':
    get:
      summary: Get a component alarm
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/alarm'
      operationId: get-alarm
      description: Get an existing component alarm
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
    put:
      summary: Set a component alarm
      operationId: set-alarm
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/alarm.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  action: AUDIO
                  trigger:
                    dtstart: '2019-08-24T14:15:22Z'
                  description: string
                  duration: PT15M
                  repeat: 1
                  summary: string
                  attendees:
                    - cal-address: 'mailto:joecool@example.com'
                      cu-type: INDIVIDUAL
                      member: 'mailto:DEV-GROUP@example.com'
                      role: REQ-PARTICIPANT
                      partstat: NEEDS-ACTION
                      rsvp: false
                      delto: 'mailto:joecool@example.com'
                      delfrom: 'mailto:joecool@example.com'
                      sentby: 'mailto:joecool@example.com'
                      cn: string
                      dir: 'http://example.com'
                      language: en-US
                  attachments:
                    - fmttype: string
                      url: 'http://example.com'
          application/xml:
            schema:
              $ref: ../models/alarm.v1.yaml
      description: Replace an existing component alarm
    patch:
      summary: Update a component alarm
      operationId: update-alarm
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/alarm.v1.yaml
      description: Update an existing component alarm
    delete:
      summary: Delete a component alarm
      operationId: delete-alarm
      responses:
        '200':
          description: OK
      description: Delete an existing component alarm
  '/event/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/event-list'
      operationId: get-event
      description: 'Return a list of event components representing the latest version, recurrence overrides, and optionally past revisions.'
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-event
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/event.v1.yaml
            examples: {}
        description: ''
      description: Create a new revision by replacing the entire component content with the supplied values.
    patch:
      summary: ''
      operationId: update-event
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-patch'
            examples: {}
        description: ''
      description: Create a new event revision using values provided in the payload
    delete:
      summary: ''
      operationId: delete-event
      responses:
        '200':
          description: OK
  '/journal/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/journal-list'
      operationId: get-journal
      description: 'Return a list of journal components representing the latest revision, recurrence overrides, and optionally past revisions.'
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-journal
      responses:
        '200':
          description: OK
      description: Create a new revision by replacing the entire component content with the supplied values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/journal.v1.yaml
        description: ''
    patch:
      summary: ''
      operationId: update-journal
      responses:
        '200':
          description: OK
    delete:
      summary: ''
      operationId: delete-journal
      responses:
        '200':
          description: OK
  '/todo/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/todo-list'
      operationId: get-todo
      description: 'Return a list of todo components representing the latest version, recurrence overrides, and optionally past revisions.'
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    parameters:
      - $ref: '#/components/parameters/Uid'
    delete:
      summary: ''
      operationId: delete-todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ''
      description: Remove an existing todo component
    patch:
      summary: ''
      operationId: update-todo
      responses:
        '200':
          $ref: '#/components/responses/todo'
      description: Update an existing todo component
    put:
      summary: ''
      operationId: set-todo
      responses:
        '200':
          description: OK
      description: Create a new revision by replacing the entire component content with the supplied values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/todo.v1.yaml
  '/availability/{Uid}':
    get:
      summary: Get resource availability
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/availability-list'
      operationId: get-availability
      description: Return availability definitions for specified uid
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
    put:
      summary: ''
      operationId: set-availability
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/availability.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  dtend: '2019-08-24T14:15:22Z'
                  rrule: string
        description: ''
      description: Replace an existing availability definition
    patch:
      summary: ''
      operationId: update-availability
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/availability.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  dtend: '2019-08-24T14:15:22Z'
                  rrule: string
      description: Update an existing availability definition
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
  '/attachments/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/attachment-list'
      operationId: get-attachments
    post:
      summary: ''
      operationId: upload-attachment
      responses:
        '200':
          $ref: '#/components/responses/attachment'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fmttype:
                  type: string
                url:
                  type: string
                  format: uri
              required:
                - url
            examples:
              example-1:
                value:
                  fmttype: string
                  url: 'http://example.com'
    parameters:
      - $ref: '#/components/parameters/Uid'
  '/attachment/{Uid}/{Index}':
    get:
      summary: Your GET endpoint
      tags: []
      operationId: get-attachment
      description: Return content of an encoded binary attachment
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: {}
    parameters:
      - name: Uid
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier for a component or calendar
      - schema:
          type: string
        name: Index
        in: path
        required: true
        description: Index of the requested attachment
    put:
      summary: ''
      operationId: set-attachment
      responses:
        '200':
          description: OK
      description: Replace an encoded binary attachment
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: object
              properties: {}
        description: ''
    delete:
      summary: ''
      operationId: delete-attachment
      responses:
        '200':
          description: OK
      description: Delete an encoded attachment
  /availability:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/availability-list'
      operationId: list-availability
      description: Return a list of availability definitions matching request criteria
      parameters:
        - $ref: '#/components/parameters/organizer'
    post:
      summary: ''
      operationId: create-availability
      responses:
        '200':
          $ref: '#/components/responses/availability'
components:
  schemas:
    event-patch:
      title: event-patch
      type: object
      properties:
        id:
          type: string
      description: Partial event data used to update an existing event
  responses:
    event-list:
      description: A list of calendar events
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/event.v1.yaml
    todo-list:
      description: A list of calendar todos
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/todo.v1.yaml
    journal-list:
      description: A list of calendar journals
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/journal.v1.yaml
    event:
      description: A calendar event
      content:
        application/json:
          schema:
            $ref: ../models/event.v1.yaml
          examples: {}
    journal:
      description: A calendar journal component
      content:
        application/json:
          schema:
            $ref: ../models/journal.v1.yaml
    todo:
      description: A calendar todo component
      content:
        application/json:
          schema:
            $ref: ../models/todo.v1.yaml
    calendar:
      description: A grouping of calendar components
      content:
        application/json:
          schema:
            $ref: ../models/calendar.v1.yaml
          examples:
            example-1:
              value:
                id: string
                calscale: GREGORIAN
                name: string
                description: string
                last-modified: '2019-08-24T14:15:22Z'
                url: 'http://example.com'
                categories:
                  - string
                refresh-interval: string
                source: 'http://example.com'
                color: string
                image: string
                conference: 'http://example.com'
    calendar-list:
      description: A list of calendar definitions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/calendar.v1.yaml
          examples:
            example-1:
              value:
                - id: string
                  calscale: GREGORIAN
                  name: string
                  description: string
                  last-modified: '2019-08-24T14:15:22Z'
                  url: 'http://example.com'
                  categories:
                    - string
                  refresh-interval: string
                  source: 'http://example.com'
                  color: string
                  image: string
                  conference: 'http://example.com'
    alarm-list:
      description: A list of component alarms
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/alarm.v1.yaml
          examples:
            example-1:
              value:
                - id: string
                  action: AUDIO
                  trigger:
                    dtstart: '2019-08-24T14:15:22Z'
                  description: string
                  duration: PT15M
                  repeat: 1
                  summary: string
                  attendees:
                    - cal-address: 'mailto:joecool@example.com'
                      cu-type: INDIVIDUAL
                      member: 'mailto:DEV-GROUP@example.com'
                      role: REQ-PARTICIPANT
                      partstat: NEEDS-ACTION
                      rsvp: false
                      delto: 'mailto:joecool@example.com'
                      delfrom: 'mailto:joecool@example.com'
                      sentby: 'mailto:joecool@example.com'
                      cn: string
                      dir: 'http://example.com'
                      language: en-US
                  attachments:
                    - fmttype: string
                      url: 'http://example.com'
    alarm:
      description: A component alarm
      content:
        application/json:
          schema:
            $ref: ../models/alarm.v1.yaml
          examples:
            example-1:
              value:
                id: string
                action: AUDIO
                trigger:
                  dtstart: '2019-08-24T14:15:22Z'
                description: string
                duration: PT15M
                repeat: 1
                summary: string
                attendees:
                  - cal-address: 'mailto:joecool@example.com'
                    cu-type: INDIVIDUAL
                    member: 'mailto:DEV-GROUP@example.com'
                    role: REQ-PARTICIPANT
                    partstat: NEEDS-ACTION
                    rsvp: false
                    delto: 'mailto:joecool@example.com'
                    delfrom: 'mailto:joecool@example.com'
                    sentby: 'mailto:joecool@example.com'
                    cn: string
                    dir: 'http://example.com'
                    language: en-US
                attachments:
                  - fmttype: string
                    url: 'http://example.com'
    availability-list:
      description: A list of user availability definitions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/availability.v1.yaml
          examples:
            example-1:
              value:
                - id: string
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  dtend: '2019-08-24T14:15:22Z'
                  rrule: string
    attachment-list:
      description: A list of component attachments
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/attachmentRef.v1.yaml
          examples:
            example-1:
              value:
                - fmttype: string
                  url: 'http://example.com'
    attachment:
      description: A component attachment
      content:
        application/json:
          schema:
            $ref: ../models/attachmentRef.v1.yaml
          examples:
            example-1:
              value:
                fmttype: string
                url: 'http://example.com'
    freebusy:
      description: A free/busy schedule definition
      content:
        application/json:
          schema:
            $ref: ../models/freebusy.v1.yaml
          examples: {}
    availability:
      description: Example response
      content:
        application/json:
          schema:
            $ref: ../models/availability.v1.yaml
  parameters:
    Uid:
      name: Uid
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier for a component or calendar
    includeRevisions:
      name: includeRevisions
      in: query
      required: false
      schema:
        type: boolean
        default: 'false'
      description: Include previous revisions of requested component
    calendar:
      name: calendar
      in: query
      required: false
      schema:
        type: string
      description: Unique id of a calendar to filter components
    class:
      name: class
      in: query
      required: false
      schema:
        type: string
        enum:
          - PUBLIC
          - PRIVATE
          - CONFIDENTIAL
        default: PUBLIC
      description: Component classification filter
    categories:
      name: categories
      in: query
      required: false
      schema:
        type: string
      description: List of categories to filter results
    fromDate:
      name: fromDate
      in: query
      required: false
      schema:
        type: string
        format: date
      description: Minimum start date of results
    toDate:
      name: toDate
      in: query
      required: false
      schema:
        type: string
        format: date
      description: Maximum start date of results
    organizer:
      name: organizer
      in: query
      required: false
      schema:
        type: string
      description: Owner of calendars and components
  securitySchemes: {}

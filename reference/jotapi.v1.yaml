openapi: 3.0.0
info:
  title: Jot
  version: '1.0'
  description: A collaboration API based on the iCalendar specification
  license:
    name: MIT
  contact:
    name: Micronode
    url: 'https://micronode.com/jot'
    email: fortuna@micronode.com
servers:
  - url: 'http://localhost:3000'
paths:
  /calendars:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/calendar.v1.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      calscale: GREGORIAN
                      name: string
                      description: string
                      last-modified: '2019-08-24T14:15:22Z'
                      url: 'http://example.com'
                      categories:
                        - string
                      refresh-interval: string
                      source: 'http://example.com'
                      color: string
                      image: string
                      conference: 'http://example.com'
          headers: {}
      operationId: list-calendars
      description: Retrieve a list of visible calendars
    parameters: []
    post:
      summary: ''
      operationId: create-calendar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/calendar.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                calscale:
                  type: string
                  enum:
                    - GREGORIAN
            examples:
              example-1:
                value:
                  name: string
                  description: string
                  calscale: GREGORIAN
  /events:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/event.v1.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      organizer: string
                      summary: string
                      dtstart: '2019-08-24T14:15:22Z'
                      sequence: 0
                      recurrence-id: string
                      class: PUBLIC
                      priority: 0
                      status: TENTATIVE
                      dtend: '2019-08-24T14:15:22Z'
                      duration: string
                      rrule: string
                      description: string
                      url: 'http://example.com'
                      geo: string
                      location: string
                      last-modified: '2019-08-24T14:15:22Z'
                      created: '2019-08-24T14:15:22Z'
                      categories:
                        - string
                      comments:
                        - string
                      resources:
                        - id: string
                          altrep: 'CID:part3.msg.970415T083000@example.com'
                      attachments:
                        - id: string
                          fmttype: string
                          url: 'http://example.com'
                      related-to:
                        - id: 19960401-080045-4000F192713-0052@example.com
                          reltype: PARENT
                      rdates:
                        - '2019-08-24T14:15:22Z'
                      exdates:
                        - '2019-08-24T14:15:22Z'
                      attendees:
                        - cal-address: 'mailto:joecool@example.com'
                          cu-type: INDIVIDUAL
                          member: 'mailto:DEV-GROUP@example.com'
                          role: REQ-PARTICIPANT
                          partstat: NEEDS-ACTION
                          rsvp: false
                          delto: 'mailto:joecool@example.com'
                          delfrom: 'mailto:joecool@example.com'
                          sentby: 'mailto:joecool@example.com'
                          cn: string
                          dir: 'http://example.com'
                          language: en-US
                      transp: OPAQUE
                      alarms:
                        - id: string
                          action: AUDIO
                          trigger:
                            dtstart: '2019-08-24T14:15:22Z'
                          description: string
                          duration: PT15M
                          repeat: 1
                          summary: string
                          attendees:
                            - cal-address: 'mailto:joecool@example.com'
                              cu-type: INDIVIDUAL
                              member: 'mailto:DEV-GROUP@example.com'
                              role: REQ-PARTICIPANT
                              partstat: NEEDS-ACTION
                              rsvp: false
                              delto: 'mailto:joecool@example.com'
                              delfrom: 'mailto:joecool@example.com'
                              sentby: 'mailto:joecool@example.com'
                              cn: string
                              dir: 'http://example.com'
                              language: en-US
                          attachments:
                            - id: string
                              fmttype: string
                              url: 'http://example.com'
      operationId: list-events
      description: Return a list of visible events
      parameters:
        - schema:
            type: string
          in: query
          name: calendar
          description: Unique id of a calendar to filter events
        - schema:
            type: string
          in: query
          name: organizer
          description: Owner of the events
        - schema:
            type: string
            uniqueItems: true
            example: 'APPOINTMENT,EDUCATION'
          in: query
          name: categories
          description: List of categories to filter results
        - schema:
            type: string
            example: PRIVATE
            enum:
              - PUBLIC
              - PRIVATE
              - CONFIDENTIAL
            default: PUBLIC
          in: query
          name: class
          description: Event classification
        - schema:
            type: string
            format: date
          in: query
          name: fromDate
          description: Minimum start date of results
        - schema:
            type: string
            format: date
          in: query
          name: toDate
          description: Maximum start date of results
    post:
      summary: ''
      operationId: create-event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/event.v1.yaml
              examples:
                example-1:
                  value:
                    id: string
                    organizer: string
                    summary: string
                    dtstart: '2019-08-24T14:15:22Z'
                    sequence: 0
                    recurrence-id: string
                    class: PUBLIC
                    priority: 0
                    status: TENTATIVE
                    dtend: '2019-08-24T14:15:22Z'
                    duration: string
                    rrule: string
                    description: string
                    url: 'http://example.com'
                    geo: string
                    location: string
                    last-modified: '2019-08-24T14:15:22Z'
                    created: '2019-08-24T14:15:22Z'
                    categories:
                      - string
                    comments:
                      - string
                    resources:
                      - id: string
                        altrep: 'CID:part3.msg.970415T083000@example.com'
                    attachments:
                      - id: string
                        fmttype: string
                        url: 'http://example.com'
                    related-to:
                      - id: 19960401-080045-4000F192713-0052@example.com
                        reltype: PARENT
                    rdates:
                      - '2019-08-24T14:15:22Z'
                    exdates:
                      - '2019-08-24T14:15:22Z'
                    attendees:
                      - cal-address: 'mailto:joecool@example.com'
                        cu-type: INDIVIDUAL
                        member: 'mailto:DEV-GROUP@example.com'
                        role: REQ-PARTICIPANT
                        partstat: NEEDS-ACTION
                        rsvp: false
                        delto: 'mailto:joecool@example.com'
                        delfrom: 'mailto:joecool@example.com'
                        sentby: 'mailto:joecool@example.com'
                        cn: string
                        dir: 'http://example.com'
                        language: en-US
                    transp: OPAQUE
                    alarms:
                      - id: string
                        action: AUDIO
                        trigger:
                          dtstart: '2019-08-24T14:15:22Z'
                        description: string
                        duration: PT15M
                        repeat: 1
                        summary: string
                        attendees:
                          - cal-address: 'mailto:joecool@example.com'
                            cu-type: INDIVIDUAL
                            member: 'mailto:DEV-GROUP@example.com'
                            role: REQ-PARTICIPANT
                            partstat: NEEDS-ACTION
                            rsvp: false
                            delto: 'mailto:joecool@example.com'
                            delfrom: 'mailto:joecool@example.com'
                            sentby: 'mailto:joecool@example.com'
                            cn: string
                            dir: 'http://example.com'
                            language: en-US
                        attachments:
                          - id: string
                            fmttype: string
                            url: 'http://example.com'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organizer:
                  type: string
                summary:
                  type: string
                dtstart:
                  type: string
                  format: date-time
                calendar:
                  type: string
              required:
                - organizer
                - summary
                - dtstart
                - calendar
            examples:
              example-1:
                value:
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  calendar: string
  /todos:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/todo.v1.yaml
      operationId: list-todos
    post:
      summary: ''
      operationId: create-todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/todo.v1.yaml
      description: Create a new todo component
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organizer:
                  type: string
                calendar:
                  type: string
                summary:
                  type: string
              required:
                - organizer
                - calendar
                - summary
            examples:
              example-1:
                value:
                  organizer: string
                  calendar: string
                  summary: string
  /journals:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/journal.v1.yaml
      operationId: list-journals
    post:
      summary: ''
      operationId: create-journal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/journal.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organizer:
                  type: string
                calendar:
                  type: string
                summary:
                  type: string
              required:
                - organizer
                - calendar
                - summary
            examples:
              example-1:
                value:
                  organizer: string
                  calendar: string
                  summary: string
  /freebusy:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/freebusy.v1.yaml
      operationId: request-freebusy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        description: Freebusy request
  '/calendar/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/calendar.v1.yaml
      operationId: get-calendar
      description: Retrieve detail of a specific calendar
    parameters:
      - schema:
          type: string
        name: Uid
        in: path
        required: true
        description: Calendar unique identifier
    put:
      summary: ''
      operationId: set-calendar
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/calendar.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  calscale: GREGORIAN
                  name: string
                  description: string
                  last-modified: '2019-08-24T14:15:22Z'
                  url: 'http://example.com'
                  categories:
                    - string
                  refresh-interval: string
                  source: 'http://example.com'
                  color: string
                  image: string
                  conference: 'http://example.com'
    patch:
      summary: ''
      operationId: update-calendar
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/calendar.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  calscale: GREGORIAN
                  name: string
                  description: string
                  last-modified: '2019-08-24T14:15:22Z'
                  url: 'http://example.com'
                  categories:
                    - string
                  refresh-interval: string
                  source: 'http://example.com'
                  color: string
                  image: string
                  conference: 'http://example.com'
    delete:
      summary: ''
      operationId: delete-calendar
      responses:
        '200':
          description: OK
  '/alarms/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/alarm.v1.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      action: AUDIO
                      trigger:
                        dtstart: '2019-08-24T14:15:22Z'
                      description: string
                      duration: PT15M
                      repeat: 1
                      summary: string
                      attendees:
                        - cal-address: 'mailto:joecool@example.com'
                          cu-type: INDIVIDUAL
                          member: 'mailto:DEV-GROUP@example.com'
                          role: REQ-PARTICIPANT
                          partstat: NEEDS-ACTION
                          rsvp: false
                          delto: 'mailto:joecool@example.com'
                          delfrom: 'mailto:joecool@example.com'
                          sentby: 'mailto:joecool@example.com'
                          cn: string
                          dir: 'http://example.com'
                          language: en-US
                      attachments:
                        - id: string
                          fmttype: string
                          url: 'http://example.com'
      operationId: list-alarms
      description: Return a list of visible alarms
    post:
      summary: ''
      operationId: create-alarm
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/alarm.v1.yaml
              examples:
                example-1:
                  value:
                    id: string
                    action: AUDIO
                    trigger:
                      dtstart: '2019-08-24T14:15:22Z'
                    description: string
                    duration: PT15M
                    repeat: 1
                    summary: string
                    attendees:
                      - cal-address: 'mailto:joecool@example.com'
                        cu-type: INDIVIDUAL
                        member: 'mailto:DEV-GROUP@example.com'
                        role: REQ-PARTICIPANT
                        partstat: NEEDS-ACTION
                        rsvp: false
                        delto: 'mailto:joecool@example.com'
                        delfrom: 'mailto:joecool@example.com'
                        sentby: 'mailto:joecool@example.com'
                        cn: string
                        dir: 'http://example.com'
                        language: en-US
                    attachments:
                      - id: string
                        fmttype: string
                        url: 'http://example.com'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - AUDIO
                    - DISPLAY
                    - EMAIL
                trigger:
                  oneOf:
                    - $ref: ./models/trigger.v1.yaml
                    - $ref: ./models/triggerRel.v1.yaml
            examples:
              example-1:
                value:
                  action: AUDIO
                  trigger:
                    dtstart: '2019-08-24T14:15:22Z'
    parameters:
      - schema:
          type: string
        name: Uid
        in: path
        required: true
        description: Unique identifier of parent component
  '/alarm/{Id}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/alarm.v1.yaml
      operationId: get-alarm
    parameters:
      - schema:
          type: string
        name: Id
        in: path
        required: true
        description: Alarm identifier unique in the context of the parent component
    put:
      summary: ''
      operationId: set-alarm
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/alarm.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  action: AUDIO
                  trigger:
                    dtstart: '2019-08-24T14:15:22Z'
                  description: string
                  duration: PT15M
                  repeat: 1
                  summary: string
                  attendees:
                    - cal-address: 'mailto:joecool@example.com'
                      cu-type: INDIVIDUAL
                      member: 'mailto:DEV-GROUP@example.com'
                      role: REQ-PARTICIPANT
                      partstat: NEEDS-ACTION
                      rsvp: false
                      delto: 'mailto:joecool@example.com'
                      delfrom: 'mailto:joecool@example.com'
                      sentby: 'mailto:joecool@example.com'
                      cn: string
                      dir: 'http://example.com'
                      language: en-US
                  attachments:
                    - id: string
                      fmttype: string
                      url: 'http://example.com'
    patch:
      summary: ''
      operationId: update-alarm
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/alarm.v1.yaml
    delete:
      summary: ''
      operationId: delete-alarm
      responses:
        '200':
          description: OK
  '/event/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/event.v1.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      organizer: string
                      summary: string
                      dtstart: '2019-08-24T14:15:22Z'
                      sequence: 0
                      recurrence-id: string
                      class: PUBLIC
                      priority: 0
                      status: TENTATIVE
                      dtend: '2019-08-24T14:15:22Z'
                      duration: string
                      rrule: string
                      description: string
                      url: 'http://example.com'
                      geo: string
                      location: string
                      last-modified: '2019-08-24T14:15:22Z'
                      created: '2019-08-24T14:15:22Z'
                      categories:
                        - string
                      comments:
                        - string
                      resources:
                        - id: string
                          altrep: 'CID:part3.msg.970415T083000@example.com'
                      attachments:
                        - id: string
                          fmttype: string
                          url: 'http://example.com'
                      related-to:
                        - id: 19960401-080045-4000F192713-0052@example.com
                          reltype: PARENT
                      rdates:
                        - '2019-08-24T14:15:22Z'
                      exdates:
                        - '2019-08-24T14:15:22Z'
                      attendees:
                        - cal-address: 'mailto:joecool@example.com'
                          cu-type: INDIVIDUAL
                          member: 'mailto:DEV-GROUP@example.com'
                          role: REQ-PARTICIPANT
                          partstat: NEEDS-ACTION
                          rsvp: false
                          delto: 'mailto:joecool@example.com'
                          delfrom: 'mailto:joecool@example.com'
                          sentby: 'mailto:joecool@example.com'
                          cn: string
                          dir: 'http://example.com'
                          language: en-US
                      transp: OPAQUE
                      alarms:
                        - id: string
                          action: AUDIO
                          trigger:
                            dtstart: '2019-08-24T14:15:22Z'
                          description: string
                          duration: PT15M
                          repeat: 1
                          summary: string
                          attendees:
                            - cal-address: 'mailto:joecool@example.com'
                              cu-type: INDIVIDUAL
                              member: 'mailto:DEV-GROUP@example.com'
                              role: REQ-PARTICIPANT
                              partstat: NEEDS-ACTION
                              rsvp: false
                              delto: 'mailto:joecool@example.com'
                              delfrom: 'mailto:joecool@example.com'
                              sentby: 'mailto:joecool@example.com'
                              cn: string
                              dir: 'http://example.com'
                              language: en-US
                          attachments:
                            - id: string
                              fmttype: string
                              url: 'http://example.com'
      operationId: get-event
      description: 'Return a list of event components representing the latest version, recurrence overrides, and optionally past revisions.'
      parameters:
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: includeRevisions
    parameters:
      - schema:
          type: string
        name: Uid
        in: path
        required: true
    put:
      summary: ''
      operationId: set-event
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/event.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  sequence: 0
                  recurrence-id: string
                  class: PUBLIC
                  priority: 0
                  status: TENTATIVE
                  dtend: '2019-08-24T14:15:22Z'
                  duration: string
                  rrule: string
                  description: string
                  url: 'http://example.com'
                  geo: string
                  location: string
                  last-modified: '2019-08-24T14:15:22Z'
                  created: '2019-08-24T14:15:22Z'
                  categories:
                    - string
                  comments:
                    - string
                  resources:
                    - id: string
                      altrep: 'CID:part3.msg.970415T083000@example.com'
                  attachments:
                    - id: string
                      fmttype: string
                      url: 'http://example.com'
                  related-to:
                    - id: 19960401-080045-4000F192713-0052@example.com
                      reltype: PARENT
                  rdates:
                    - '2019-08-24T14:15:22Z'
                  exdates:
                    - '2019-08-24T14:15:22Z'
                  attendees:
                    - cal-address: 'mailto:joecool@example.com'
                      cu-type: INDIVIDUAL
                      member: 'mailto:DEV-GROUP@example.com'
                      role: REQ-PARTICIPANT
                      partstat: NEEDS-ACTION
                      rsvp: false
                      delto: 'mailto:joecool@example.com'
                      delfrom: 'mailto:joecool@example.com'
                      sentby: 'mailto:joecool@example.com'
                      cn: string
                      dir: 'http://example.com'
                      language: en-US
                  transp: OPAQUE
                  alarms:
                    - id: string
                      action: AUDIO
                      trigger:
                        dtstart: '2019-08-24T14:15:22Z'
                      description: string
                      duration: PT15M
                      repeat: 1
                      summary: string
                      attendees:
                        - cal-address: 'mailto:joecool@example.com'
                          cu-type: INDIVIDUAL
                          member: 'mailto:DEV-GROUP@example.com'
                          role: REQ-PARTICIPANT
                          partstat: NEEDS-ACTION
                          rsvp: false
                          delto: 'mailto:joecool@example.com'
                          delfrom: 'mailto:joecool@example.com'
                          sentby: 'mailto:joecool@example.com'
                          cn: string
                          dir: 'http://example.com'
                          language: en-US
                      attachments:
                        - id: string
                          fmttype: string
                          url: 'http://example.com'
      description: Create a new revision by replacing the entire component content with the supplied values.
    patch:
      summary: ''
      operationId: update-event
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/event.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  sequence: 0
                  recurrence-id: string
                  class: PUBLIC
                  priority: 0
                  status: TENTATIVE
                  dtend: '2019-08-24T14:15:22Z'
                  duration: string
                  rrule: string
                  description: string
                  url: 'http://example.com'
                  geo: string
                  location: string
                  last-modified: '2019-08-24T14:15:22Z'
                  created: '2019-08-24T14:15:22Z'
                  categories:
                    - string
                  comments:
                    - string
                  resources:
                    - id: string
                      altrep: 'CID:part3.msg.970415T083000@example.com'
                  attachments:
                    - id: string
                      fmttype: string
                      url: 'http://example.com'
                  related-to:
                    - id: 19960401-080045-4000F192713-0052@example.com
                      reltype: PARENT
                  rdates:
                    - '2019-08-24T14:15:22Z'
                  exdates:
                    - '2019-08-24T14:15:22Z'
                  attendees:
                    - cal-address: 'mailto:joecool@example.com'
                      cu-type: INDIVIDUAL
                      member: 'mailto:DEV-GROUP@example.com'
                      role: REQ-PARTICIPANT
                      partstat: NEEDS-ACTION
                      rsvp: false
                      delto: 'mailto:joecool@example.com'
                      delfrom: 'mailto:joecool@example.com'
                      sentby: 'mailto:joecool@example.com'
                      cn: string
                      dir: 'http://example.com'
                      language: en-US
                  transp: OPAQUE
                  alarms:
                    - id: string
                      action: AUDIO
                      trigger:
                        dtstart: '2019-08-24T14:15:22Z'
                      description: string
                      duration: PT15M
                      repeat: 1
                      summary: string
                      attendees:
                        - cal-address: 'mailto:joecool@example.com'
                          cu-type: INDIVIDUAL
                          member: 'mailto:DEV-GROUP@example.com'
                          role: REQ-PARTICIPANT
                          partstat: NEEDS-ACTION
                          rsvp: false
                          delto: 'mailto:joecool@example.com'
                          delfrom: 'mailto:joecool@example.com'
                          sentby: 'mailto:joecool@example.com'
                          cn: string
                          dir: 'http://example.com'
                          language: en-US
                      attachments:
                        - id: string
                          fmttype: string
                          url: 'http://example.com'
        description: ''
    delete:
      summary: ''
      operationId: delete-event
      responses:
        '200':
          description: OK
  '/journal/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/journal.v1.yaml
              examples: {}
      operationId: get-journal
      description: 'Return a list of journal components representing the latest revision, recurrence overrides, and optionally past revisions.'
      parameters:
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: includeRevisions
          description: Include all component revisions in results
    parameters:
      - schema:
          type: string
        name: Uid
        in: path
        required: true
    put:
      summary: ''
      operationId: set-journal
      responses:
        '200':
          description: OK
      description: Create a new revision by replacing the entire component content with the supplied values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/journal.v1.yaml
        description: ''
    patch:
      summary: ''
      operationId: update-journal
      responses:
        '200':
          description: OK
    delete:
      summary: ''
      operationId: delete-journal
      responses:
        '200':
          description: OK
  '/todo/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/todo.v1.yaml
      operationId: get-todo
      description: 'Return a list of todo components representing the latest version, recurrence overrides, and optionally past revisions.'
      parameters:
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: includeRevisions
    parameters:
      - schema:
          type: string
        name: Uid
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ''
      description: Remove an existing todo component
    patch:
      summary: ''
      operationId: update-todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/todo.v1.yaml
      description: Update an existing todo component
    put:
      summary: ''
      operationId: set-todo
      responses:
        '200':
          description: OK
      description: Create a new revision by replacing the entire component content with the supplied values.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/todo.v1.yaml
  '/availability/{Organizer}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/availability.v1.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      organizer: string
                      summary: string
                      dtstart: '2019-08-24T14:15:22Z'
                      dtend: '2019-08-24T14:15:22Z'
                      rrule: string
      operationId: get-availability
    put:
      summary: ''
      operationId: set-availability
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/availability.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  dtend: '2019-08-24T14:15:22Z'
                  rrule: string
        description: ''
    patch:
      summary: ''
      operationId: update-availability
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/availability.v1.yaml
            examples:
              example-1:
                value:
                  id: string
                  organizer: string
                  summary: string
                  dtstart: '2019-08-24T14:15:22Z'
                  dtend: '2019-08-24T14:15:22Z'
                  rrule: string
    parameters:
      - schema:
          type: string
        name: Organizer
        in: path
        required: true
        description: URI of organizer
  '/attachments/{Uid}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/attachment.v1.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      fmttype: string
                      url: 'http://example.com'
      operationId: get-attachments
    post:
      summary: ''
      operationId: upload-attachment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/attachment.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fmttype:
                  type: string
                url:
                  type: string
                  format: uri
              required:
                - url
            examples:
              example-1:
                value:
                  fmttype: string
                  url: 'http://example.com'
    parameters:
      - schema:
          type: string
        name: Uid
        in: path
        required: true
        description: Unique identifier of a component
  '/attachment/{Id}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/attachment.v1.yaml
              examples:
                example-1:
                  value:
                    id: string
                    fmttype: string
                    url: 'http://example.com'
      operationId: get-attachment
    parameters:
      - schema:
          type: string
        name: Id
        in: path
        required: true
        description: Attachment identifier unique in the context of the parent component
    put:
      summary: ''
      operationId: set-attachment
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/attachment.v1.yaml
    delete:
      summary: ''
      operationId: delete-attachment
      responses:
        '200':
          description: OK
components:
  schemas: {}

openapi: 3.0.0
info:
  title: JotCard
  version: '1.0'
  description: A resource profile API based on the vCard specification
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/micronode/jotapi/main/LICENSE'
  contact:
    name: Micronode
    url: 'https://micronode.com/jot'
    email: fortuna@micronode.com
servers:
  - url: '{protocol}://{host}/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      host:
        default: api.example.com
    description: JotCard
paths:
  /groups:
    get:
      summary: Your GET endpoint
      tags:
        - group
      responses:
        '200':
          $ref: '#/components/responses/groupcard-list'
      operationId: list-groups
      parameters:
        - $ref: '#/components/parameters/filter'
      description: Retrieve a list of visible groups
    post:
      summary: ''
      operationId: create-group
      responses:
        '201':
          $ref: '#/components/responses/groupcard'
      tags:
        - group
      description: Create a new card group
  '/group/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - group
      responses:
        '200':
          $ref: '#/components/responses/groupcard'
      operationId: get-group
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
      description: Retrieve a single card group
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-group
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/groupcard.v1.yaml
      tags:
        - group
      description: Replace an existing card group
    patch:
      summary: ''
      operationId: update-group
      responses:
        '200':
          description: OK
      tags:
        - group
      description: Update an existing card group
    delete:
      summary: ''
      operationId: delete-group
      responses:
        '200':
          description: OK
      tags:
        - group
      description: Delete an existing card group
  /cards:
    get:
      summary: Your GET endpoint
      tags:
        - card
      responses:
        '200':
          $ref: '#/components/responses/card-list'
      operationId: list-cards
      parameters:
        - $ref: '#/components/parameters/filter'
      description: Retrieve a list of cards
    post:
      summary: ''
      operationId: create-card
      responses:
        '201':
          $ref: '#/components/responses/card'
      tags:
        - card
      description: Create a new card
  '/card/{Uid}':
    get:
      summary: Your GET endpoint
      tags:
        - card
      responses:
        '200':
          $ref: '#/components/responses/card'
      operationId: get-card
      parameters:
        - $ref: '#/components/parameters/includeRevisions'
      description: Retrieve a single card
    parameters:
      - $ref: '#/components/parameters/Uid'
    put:
      summary: ''
      operationId: set-card
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/card.v1.yaml
      tags:
        - card
      description: Replace an existing card
    patch:
      summary: ''
      operationId: update-card
      responses:
        '200':
          description: OK
      tags:
        - card
      description: Update an existing card
    delete:
      summary: ''
      operationId: delete-card
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      tags:
        - card
      description: Delete an existing card
components:
  schemas: {}
  parameters:
    Uid:
      name: Uid
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier for a card or group
    includeRevisions:
      name: includeRevisions
      in: query
      required: false
      schema:
        type: string
      description: Include previous revisions of requested card or group
    filter:
      name: f
      in: query
      required: false
      schema:
        type: string
        example: 'uid in [''12345-0987'']'
      description: An ical4j filter expression
  responses:
    card:
      description: Resoure card
      content:
        application/json:
          schema:
            $ref: ../models/card.v1.yaml
          examples:
            example-1:
              value:
                uid: 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
                fn:
                  - 'Mr. John Q. Public\, Esq.'
                kind: individual
                source:
                  - 'ldap://ldap.example.com/cn=Babs%20Jensen,%20o=Babsco,%20c=US'
                'n':
                  surnames: string
                  given: string
                  additional: string
                  prefixes: string
                  suffixes: string
                nickname:
                  - string
                photo:
                  - 'https://dummyimage.com/150/de11de/fff.png&text=Photo'
                bday: '2019-08-24'
                anniversary: '2019-08-24'
                gender:
                  sex: M
                  identity: string
                adr:
                  - pobox: string
                    extended: string
                    street: string
                    locality: string
                    region: string
                    postalcode: string
                    country: string
                    label: string
                    geo: 'geo:12.3457,78.910'
                tel:
                  - type:
                      - voice
                    uri: 'tel:+1-555-555-5555;ext=5555'
                    pref: 1
                email:
                  - type:
                      - work
                    address: jqpublic@xyz.example.com
                    pref: 1
                impp:
                  - type:
                      - jabber
                    uri: 'xmpp:alice@example.com'
                    pref: 1
                lang:
                  - fr
                tz:
                  - Raleigh/North America
                geo:
                  - 'geo:37.386013,-122.082932'
                title:
                  - Research Scientist
                role:
                  - Project Leader
                logo:
                  - 'https://dummyimage.com/150/de11de/fff.png&text=Logo'
                org:
                  - name: 'ABC\, Inc.'
                    ou:
                      - North American Division
                related:
                  - 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
                categories:
                  - 'INTERNET,IETF,INDUSTRY,INFORMATION TECHNOLOGY'
                note:
                  - string
                rev: '2019-08-24T14:15:22Z'
                sound:
                  - 'CID:JOHNQPUBLIC.part8.19960229T080000.xyzMail@example.com'
                url:
                  - 'http://example.org/restaurant.french/~chezchic.html'
                key:
                  - 'http://www.example.com/keys/jdoe.cer'
                fburl:
                  - 'http://www.example.com/busy/janedoe'
                caladruri:
                  - 'mailto:janedoe@example.com'
                caluri:
                  - 'http://cal.example.com/calA'
    groupcard:
      description: Resource group
      content:
        application/json:
          schema:
            $ref: ../models/groupcard.v1.yaml
          examples:
            example-1:
              value:
                uid: 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
                fn:
                  - Funky distribution list
                members:
                  - 'mailto:subscriber1@example.com'
    card-list:
      description: A list of resource cards
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/card.v1.yaml
          examples:
            example-1:
              value:
                - uid: 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
                  fn:
                    - 'Mr. John Q. Public\, Esq.'
                  kind: individual
                  source:
                    - 'ldap://ldap.example.com/cn=Babs%20Jensen,%20o=Babsco,%20c=US'
                  'n':
                    surnames: string
                    given: string
                    additional: string
                    prefixes: string
                    suffixes: string
                  nickname:
                    - string
                  photo:
                    - 'https://dummyimage.com/150/de11de/fff.png&text=Photo'
                  bday: '2019-08-24'
                  anniversary: '2019-08-24'
                  gender:
                    sex: M
                    identity: string
                  adr:
                    - pobox: string
                      extended: string
                      street: string
                      locality: string
                      region: string
                      postalcode: string
                      country: string
                      label: string
                      geo: 'geo:12.3457,78.910'
                  tel:
                    - type:
                        - voice
                      uri: 'tel:+1-555-555-5555;ext=5555'
                      pref: 1
                  email:
                    - type:
                        - work
                      address: jqpublic@xyz.example.com
                      pref: 1
                  impp:
                    - type:
                        - jabber
                      uri: 'xmpp:alice@example.com'
                      pref: 1
                  lang:
                    - fr
                  tz:
                    - Raleigh/North America
                  geo:
                    - 'geo:37.386013,-122.082932'
                  title:
                    - Research Scientist
                  role:
                    - Project Leader
                  logo:
                    - 'https://dummyimage.com/150/de11de/fff.png&text=Logo'
                  org:
                    - name: 'ABC\, Inc.'
                      ou:
                        - North American Division
                  related:
                    - 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
                  categories:
                    - 'INTERNET,IETF,INDUSTRY,INFORMATION TECHNOLOGY'
                  note:
                    - string
                  rev: '2019-08-24T14:15:22Z'
                  sound:
                    - 'CID:JOHNQPUBLIC.part8.19960229T080000.xyzMail@example.com'
                  url:
                    - 'http://example.org/restaurant.french/~chezchic.html'
                  key:
                    - 'http://www.example.com/keys/jdoe.cer'
                  fburl:
                    - 'http://www.example.com/busy/janedoe'
                  caladruri:
                    - 'mailto:janedoe@example.com'
                  caluri:
                    - 'http://cal.example.com/calA'
    groupcard-list:
      description: A list of resource groups
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ../models/groupcard.v1.yaml
          examples:
            example-1:
              value:
                - uid: 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
                  fn:
                    - Funky distribution list
                  members:
                    - 'mailto:subscriber1@example.com'
tags:
  - name: card
  - name: group
